#include <algorithm>
#include <cassert>
#include <chrono>
#include <iostream>
#include <ostream>
#include <unordered_set>
#include <vector>


#define PROFILING

int cur_path_char_index=0;

std::vector<unsigned long long> path_hashes;

const int alph_size{26};
const int Nmax{1200};
unsigned long long p_pow_char_array1[alph_size*Nmax];
const int mod = 1000000000 + 7;
const int mod2 = 1000000000 + 9;
const int p = 31;
bool p_pow_inited = false;


static int path_size;
static int path_size_m1;
static int N;

int grid[Nmax];
int upside_down_grid[Nmax];

unsigned long long h1;
unsigned long long h2;
unsigned long long h3;
unsigned long long h4;

inline void update_rolling_hashes(int cur_i)
{
	const auto c1 = grid[cur_i];
	const auto c2 = upside_down_grid[cur_i];
	const auto inverse_index{path_size_m1 - cur_path_char_index};
	
	h1 += p_pow_char_array1[c1+cur_path_char_index];
	h2 += p_pow_char_array1[c2+cur_path_char_index];
	h3 += p_pow_char_array1[c1+inverse_index];
	h4 += p_pow_char_array1[c2+inverse_index];

	cur_path_char_index++;
}

unsigned long long compute_hash(const int s[]) {
	unsigned long long h = 0;
	for(int i=0;i<path_size;i++)
	{
		h+=p_pow_char_array1[s[i]+i];
	}
	return h;
}

void add_path(unsigned long long h)
{
	path_hashes.push_back(h);
}

int GridlandProvinces(const std::string s1, const std::string s2)
{
	if (!p_pow_inited)
	{
		for(int i=0;i<alph_size;i++)
		{
			unsigned long long p1=1;
			unsigned long long p2=1;
			
			for(int j=0;j<Nmax;j++){
				p_pow_char_array1[i*Nmax+j] = ((((i + 1) * p1) % mod) << 7) + ((i + 1) * p2) % mod2;

				p1=(p1 * p)%mod;
				p2=(p2 * p)%mod2;
			}
		}
	}

	N=static_cast<int>(s1.size());
	path_hashes.clear();
	path_hashes.reserve(N*N/2);

	path_size=2*N;
	path_size_m1=path_size-1;


	for(int i=0;i<s1.size();++i)
	{
		grid[i]=(s1[i]-'a')*Nmax;
		grid[N+i]=(s2[i]-'a')*Nmax;

		upside_down_grid[N+i]=(s1[i]-'a')*Nmax;
		upside_down_grid[i]=(s2[i]-'a')*Nmax;
	}

	{
		for(int i{0};i<N-1;++i)
		{
			h1=0;
			h2=0;
			h3=0;
			h4=0;
			int cur_y = -N;
	
			int cur_i{i};
			cur_path_char_index=0;
			update_rolling_hashes(cur_i);
			
			for(int k=0;k<i;k++)
			{
				update_rolling_hashes(--cur_i);
			}

			cur_y=-cur_y;
			cur_i+=cur_y;
			update_rolling_hashes(cur_i);

			for(int k=0;k<i+1;++k)
			{
				update_rolling_hashes(++cur_i);
			}

			int cur_i0{cur_i};
			int cur_y0{cur_y};
			int cur_path_char_index0{cur_path_char_index};
			unsigned long long h10{h1};
			unsigned long long h20{h2};
			unsigned long long h30{h3};
			unsigned long long h40{h4};
			for(int j{0};j<N-i-1;j++)
			{
				if (j > 0)
				{
					cur_y=-cur_y;
					cur_i+=cur_y;
					update_rolling_hashes(cur_i);
					update_rolling_hashes(++cur_i);
					
					cur_i0=cur_i;
					cur_y0=cur_y;
					cur_path_char_index0=cur_path_char_index;
	
					h10=h1;
					h20=h2;
					h30=h3;
					h40=h4;
				}

				for(int k=0;k<N-j-i-2;k++)
				{
					update_rolling_hashes(++cur_i);
				}
				cur_y=-cur_y;
				cur_i+=cur_y;
				update_rolling_hashes(cur_i);
				for(int k=0;k<N-j-i-2;k++)
				{
					update_rolling_hashes(--cur_i);
				}

				path_hashes.push_back(h1);
				path_hashes.push_back(h2);
				path_hashes.push_back(h3);
				path_hashes.push_back(h4);

				cur_path_char_index=cur_path_char_index0;
            	cur_i=cur_i0;
            	cur_y=cur_y0;
            	h1=h10;
            	h2=h20;
            	h3=h30;
            	h4=h40;
			}
		}

		int path1[Nmax];
		int path2[Nmax];
		{
			for(int i{0};i<N;++i)
			{
				path1[i]=grid[i];
				path1[N+i]=grid[2*N-i-1];
				
				path2[i]=grid[N-i-1];
				path2[N+i]=grid[N+i];
			}

			add_path(compute_hash(path1));
			std::reverse(path1, path1+path_size);
			add_path(compute_hash(path1));

			add_path(compute_hash(path2));
			std::reverse(path2, path2+path_size);
			add_path(compute_hash(path2));
		}
	}

	std::sort(path_hashes.begin(), path_hashes.end());
	auto new_end=std::unique(path_hashes.begin(), path_hashes.end());
	path_hashes.erase(new_end, path_hashes.end());
	auto new_size = path_hashes.size();


	return static_cast<int>(new_size);
}

int main()
{
	std::vector<std::string> input1{
		"a",
		"a",
		"ababa",
		"babab",
		"dab",
		"abd",
	};

	std::vector<int> expected_result1{1,2,8};

	std::vector<std::string> input2{
		"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdef",
		"bcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefg",
		"cccdddcccdccdcccdcddcdccdddcdccccddcdcdccccddccddccccdcddcccdcccccdddddcccccddddddcccddccdccdddddccddcdcdcddddcccdcdccdddcdcdccdcccddcdccdcddddcdccddcddccddcddddcdccdddddcdccc",
		"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc",
		"aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"ijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmij",
		"jklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijk",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aabaababbbabbaababababbbbbabbaaabaaababbaababbbaaaabbabbabbaaabbbbaabaabbabbbbbbbbabbaabababbbabaabaabaaaabbbabbbbbabbabbabbbbbaaabbbbbabbaaaabaababbbbababbbaaaabbbbabbbaaabbbaaabbaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"adabacabccacbabbdacdbcccaabdacacaaacdacbcbcbabacaacbddbddcdabccaaaabdabdddaddbdbcdccbcaccdbdcbbaacaddcadacddcdcbaacbdaddbbaadcacacbddddcbabcbdbbdadcbdcdbcdabbacabc",
		"aabbbaaabbaabbabababaaababbbbabbbbaabbabbaaaabbababbabbbabbbabaaaaabbbbabbaababaaabaabbaabbabaabbaabbababaaab",
		"bcbccbbcccbccbbccbbccccbcccbccbbccbcbbcbcccbcbcccbcbcbccbccccbcbbcbcccccccbcbccccbbbbccbbccbccbbcbccbbbbbbcbc",
		"ijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijk",
		"jklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmno",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaacaaaabaaaaaaaaaabaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"baaaaaacaaaaaaaaaaaaaaaacabaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaacaaaaaaaaaaaaaabaaaabaaaaaaaaaaa",
		"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababa",
		"babababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
		"rstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrs",
		"strstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrst",
		"bbbbabaabbbbabbaaabbbabbbbababbaaabbbbaababaabbbabaaaabbabbabbabbaabbbbabbbbbbbababbbbabababbabbaaabaabbaaaababaabababbbaaaaabaabbbaabbbbababbababaaaaaaabaaaaaaabbababaabaababbbabaaabbabaabbaaaaababab",
		"aacbbacaaacbbcbbabcccbbbacaababacbccbabbaccbcbabaacbcaaccacaabcaaabaaccbabbcbcbacbbaababccacbacbaccabbbabacbacacbacacbcbbbabcabcacbcaccbacabcabcbbcbabccccababbcaacacbbaaccabaaccbcabaccababbccbbaacacbb",
		"ggggghhgghhhghhhggghgghhhgghhhhhhhhgghghghhhghhhhghghhgghghhggghghhggggghhhhgghhhggghhghgghhhghhhgghhggghhghggghghhhghhhgggggghgggghhgghgghggghgghhhghhhghghhghhghhgggghggghggghhghhggghhghghhhggghhghhh",
		"hiigihihhiigigghgghhhiighgggihghgihhhhhihhhhigihhgihigggghhhhgighhggiiihhiiiigigiihihiihgiihiiihiiihhgiihighiihggiigighhiiiighihhghghhhhhihhggiiihghghhgghhgghhgghhgghiiihghhihhhgigghghggihihiggigggigg",
	};
	std::vector<int> expected_result2{
		14792,
		57484,
		2690 ,
		390	 ,
		8844 ,
		63746,
		52494,
		23334,
		59522,
		17870,
		17180,
		2	 ,
		20200,
		79208,
		79604
	};
	
	std::vector<std::string> input3{
		"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghi",
		"bcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghij",
		"cccdddcccdccdcccdcddcdccdddcdccccddcdcdccccddccddccccdcddcccdcccccdddddcccccddddddcccddccdccdddddccddcdcdcddddcccdcdccdddcdcdccdcccddcdccdcddddcdccddcddccddcddddcdccdddddcdcccccdccddccddccdddcccdcddccdcdddccdcddccccccdcdcccdcccdcccdcdddcdcdcdccccddcccddccddddcdcdcccdcccccccdcddddcccdddcdcccddddcccdddccdcdccddccddcdcdddcccddccddcccddddcdcddccddcddccccdddddccdccddcdccdcccdccccdcdddddddcdddcccccdcddccdcdcdcddcdcdcccddcdcdcccddddcccdccccccdcccdccddcdcddddddcddcccddddccdddccc",
		"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"ijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijkl",
		"jklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklm",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaabaaaaaaabbababaabaababbbabaaabbabaabbaaaaabababbbbaaaabbabaabbaabbabbaaabbbbbbabbbabbbabbbbabbbbabbbababbaabbaababbabbaababbbbbaaabbaabbaaabbbbbabbbabbaaaaababbbaabbbaaaaabbbabbbababaabbbbaabaabaababbaaababaabaabbbaaaabbabaabbbbabbabababbaaabbbaabaaaaabbaabbbabbbaaabaabbbaabbbbbbbbaabababbbabbbbababbaababbaaababbaaaaabbbbaabbbaaabbabaabbbabbbaabbaaabbabaaababbbabbbaaaaaabaaaabbaabaabaaabaabbbabbbababbabbabbaaaabaaabaaabbabbaaabbababbbaaabbabbbbbaabbbaabbbaaabbbbbbbbba",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaacccdaddbcdbcbabdcbcaaadcdaaccdbbcbccbdbdbbaacbacdbdcbbdacdaaabdadcbddcaadbcbdaabaabccaadbababbabacbdacdcddbabbabbbcbacbbadccddcacabbcbcacaacdaaacaaccccbabddbaacdabbacbdcddbbcaaabdbaadaabbbdcdcbdcddbaacadddcbdcbbcdbbaadcccdcadacdbdaacdddcabbadaccdddaaabbdabbddcacaccbdbbadadddababbaccdaaaaaaaddaacdbdcadacbbdaaddabdbddadbddccdbbbadabadbcacccdbccccdbccdacbaacdccbdacdddbabcddabcdacbccdbbbcacadbcbbbdabbdcccdcaababdcadbbdaccdacacddddaadbdddcdadbbadbddbaccc",
		"baababababbbbbabbbbabbbaabbbbbbabbababbbbbbbaabbbabaaaabbabaabaabaaaabbaaabbbababbabbbbbaaabbabababaaababaabaababaaabbaaabbabaaaaaaabaabbabaababaabbabaabbaaabaabbbaabaabbabababbababbabbabaababaaabbbaabbaaaaabaaaaaaabbababbaabaaaaaabbabbababbbaabaaaaaabbbaaababbaababbbbbbbbbaabbbbbaaaaabbabaababbbbabaababaabbbbaabbbbaababaabbabaaabbaabbbbbbaabbbbaabbbabbbabbababbaaaabbbabaabaaabababbaaaaaabbaaaabbbaaabaabbabbbbaaaabbabbaaaabbabbbbaabbabbabbbbaabbaaaaaababaaaabbaabbaab",
		"bbcbccbbbbcbccbbccbbcbccccccbccccbcbbbbbccbbbcbccccbcccbccbcccbbcccbccccbcbbbcbccbbbcbbbbcbccccccbcbbbbbbcbcccbbccbcccbcccbbbccbbcbcccccbbccccccbbbccbbcbccccbbcbccbbbbbbbcbccbccbbbbbcbcbcbbbbcbbbcbbcbccbccbccbbbbcbcbccccccccbbbbbbcbbbccbcbccbccbbbbcbcbcbccccbbbbcbccbbcbbccbbccbcbcccbcbbcccbbcccbbcbbbbccbcccccccbcbbccccbbbbccbcbbbbcbcbcbbcccbcbccbbcbbccbbbbcbcbbccbbcccbcccbbccbcbccccbccbbbcccbcbbbbcbbbcbbcbccbcbccccbbcccbbcbbbcccbbbcbcccbbccbccbccccccbbbbccccbcccbbccb",
		"ijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijki",
		"jklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmno",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacaaaaacacabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
		"bababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa",
		"rstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrs",
		"strstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrst",
		"abababbbabbaaaaabababbbbbbbabaaaaaaaaaababbabbbbababaabbbbaabbbbbaababbaaaaabababbbabbbbaaababbbbbbaaaaabababbaaaababbbaababbaaababababbbbabbbaabbbbaaaabaaaaabaabaabbbbbbbabbaaabbbaabbabbbbaaaaabaabbbbabbbbbaaabaaaabbbaabaaababababababbabaaaabaabbabbbabaabaaabbabaaababbbbaaabbbaabbaabbaaaaaaababbaaaaaaabababaaabaaabaabbbabaabaabaaabbbbbababaabaaaabbabbbaabaababbbbbaaaabababbbabaaaabababbbbbbabbabaabaababbaaabbabaaaaababbbaaabababaaabaaabaaabaaaabbaaabbbbaaaaaabaaabababbbaaaaabbbababaabbbbaabbaab",
		"bcccbbcbacaabacbbcbccacbcaacacacbbbabbabacabccaacbaabbbcccabcaabaabcacaaacccabacabbbbacaabaccbbccbaabacbabcacababcacbacbaaccacaccabcbccabacbbbbacaabbcaacbbcaacacbacbaccacabbbacccbaaaccbaababcabcbbacabcaaabaaabbacbbcccbaacbaacacccaaacccbcaaabcaabaccbaabbaabaaacbaacabbbbbbcbbbbacaaaabaaacbabbbcaaaccaccbcbabcbbccaabcbbacbbbabbbacaacbbaabcbccabcacccbccbbcccabcbbccaacbaababbbcbabccbbcbcccbacbabcacabbbbbcbccbbcaabacacaabaaaaabbaaabccaaabbbacbbbbbbcaaaaabaacaaaaaabcccabccabcaacbccbbcabaccccbabbacccaacc",
		"ghghghgghhghhhhhhhhghhhggggghhgghhhhhghghhhhghghhghghghghgghgghggghhghghhhgghgghhgggghhhhhggghgghgghhghhgghhghghhhggggghhhhghghgghhghhhghhhhhggghggghghghghhhhghgggghghggghhgghhghghghgghgghghggghhhhghgghhhgghghghgghhgghhhghghghhggggghhhhgghhhggghhhhhhhgghgghhhgghhghhhhgggggghhhghhghgghggghhhhhhhhghgghhhgggghhghghhghhghgghghgghgghhhgghgggghhhhhhhggghgghhggghghhggghhhgghhhghgghghhhhhghghgggghgggggghhhghghghghhhhhgghghghgggghghhggggghghgggghgghggggghgggggghhhhhghhhggghghggghhhgghhghhgghggggghggggghh",
		"hghggihhggiiigggigiiiiihhhggghhihhhghghigigigihgiiggghigiihghggighghhiggiggiihhgihhgiighgihhggiihhgggghhhhhigghghhghggghigggihhiiiihiihgigggiihgiighggghhgiggighhiiighiiggiiihhhghiihhighhhgiiihhiihgigigigihiggighghhggiighghigiiiiihihhgghihhhhhghhhihihggiiihggigggiigiggiggihgghhgggghghgiighgggihihiiiihihiihhhhgihiiggiggiihhihigihhghighhghhigiihihihiihhhghihhgghhhhihihihihihhihighigiiggiigihihiggiiihhhgigiggighhhihihghiiigiiihghhgigighgiighigghgghihhihiigighhiigihhhghiihghghghgihighggiigggigiihiggi",
	};

	std::vector<int> expected_result3{
		111392,
		440884,
		46084 ,
		1046  ,
		105800,
		444644,
		410432,
		441806,
		337030,
		255854,
		301252,
		2	  ,
		125500,
		498008,
		492050,
	};

	std::vector<std::string> input4{
		"x",
		"x",
		"cccdd",
		"ccccc",
		"abbaa",
		"aaaaa",
		"aaaaaa",
		"aabbbb",
		"ijklmi",
		"jklmij",
		"aaaaaaaaa",
		"aabbaaaab",
		"aaaaaaa",
		"acacdbd",
		"baaaaabb"  ,
		"ccccbbbc"	,
		"aaaaaaaa"	,
		"aaaaaaaa"	,
		"bbababa"	,
		"bbbabab"	,
		"cbaacbbaa"	,
		"bbcacaaab"	,
		"ababababab",
		"bababababa",
		"rstrstrstr",
		"strstrstrs",
		"bbaababbaa",
		"caccbbaaac",
		"hggghggghg",
		"hhiigghihh",
	};

	std::vector<int> expected_result4{
		1  ,
		12 ,
		16 ,
		30 ,
		24 ,
		76 ,
		78 ,
		94 ,
		1  ,
		14 ,
		110,
		2  ,
		60 ,
		154,
		152,
	};

	std::vector<std::string> input5{
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"jjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijj",
		"iijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjii",
		"abcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghij",
		"bcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijkabcdefghijk",
		"ijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmij",
		"jklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijklmijk",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"bbbaabaabbabababbabbbbabaaabaabaaaaaaaaaaaabaaabaaaaabababaaabbbabbabbbbbaabaaabbbbaabbbbaabbabbbbabbabaaaabbaaaabaababbbbbabaabbaaaaaabbaaaaabbaaaaaaabaababaabaabbbbabbbbabababbaabbaaaaaaabbbabbbbbabbaabbbabbbabaaabaababbbbabaaaaabbbabababbaaaaabaaabbbbaaaaaaaaabbabaabbbaabbabbabbabbbabbbbbabbaaabaaabbaaaaababbbaabbaaaaabaaaabbbabbbbbababbbbaaabaaa",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
		"aadddaacdbddaababccdcdbacbcacdbdbdaacbbabbbccaccadcbddcdcaabcdcdcaadbacaddaaaddcdddbabdadcdadadbddbaabdccacacabbdbaaccbddbcbdabbbacaaabdaccdbdccccbbaadbadbbadcdddacacdbddbdaaacdacacbbbbdbcbdadbbbcacbcddbcaadddbabaadddcbcdcdcabdbbadccabddbbddacbdcbdacbaadbdcdbccbcdcabcdbabacadcbaccbbbccacbadbdabdccbadadcbbddbdddacbdbddaacccababcccadacaddbbadccdccaddcdadbbbadbdbdcadbbadacaccdcadacbcbadaddbdadcacbabaccabdccdadabbbccaaddbbdbabbbcabbacdcabcbaccbaacaaa",
		"ijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkijkij",
		"jklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijklmnoijkl",
		"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaababbaaabaaaaaaaaaa",
		"aaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaabaaaaaaa",
		"aaacaaaccaaaaaacaaaaaaaaaaaaaaaaaa",
		"aaaaaacaaaccaaaacaaabbacaacbaacaba",
		"abababababababab",
		"babababababababa",
		"rstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrst",
		"strstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr",
		"babaabaabaabbabaababaaaababbaaaabaaaaabaabaaabbaaababbaabaaaaaaabbbaababbbabbbaaabbbaaababaaaabaaaabbabbabbaabbababbababaabbaababbbbabbaabbabaaaababaabababbbaaaababbbbaaabababaabbbaaaaabbbbbabaaabaabbabaabbbbbbbbaabbbaabaabaaaabaabaaaabbabaabbbbabaabbaabababbabbabbbbbbbbbbbaaaaabaaabbbbaabbbbbaaabaaabbbaaabbbabaababababaaaaababaaabbababaabaabaaabbaaabbbbabbaabababbbaaaaabbbbaabbbaaaaabbaaaabbbbbababaaababbbababbaaaabaaaaababbabbabbabaaaababaabbbbabbaabaaabbbbabbaabaaaaabbbbabbbabbabaabbbbabbabbaaababbaababbbaaababbbbbabbbabbabbbbbbbbbabaabaabbbabbabbabbaaaaaabbabbaaabaaabbabbbabaaabbababaababa",
		"accaacbaaccabbaccaccacacccababccaaacbbbbcbabbbaabaabcbbbacaabbacaaaaccaabbcacacccccbcabbbcabcaccbbbbaacbaababaaabcbaccccaccccbaacacccaccbcbcaccbcabbccaaaaacbbacaacbccacbcccaaababbaacaaaacbcaaacbcbcbbbbbbcbabaccaccbcbbcabcbbababccacbcccbbaabcaabbacaaaacabbacabbbcbabaabbabcbbbaccccaccbabcabbcbbcbbbbacccbcaaaabaccaabaabccbbbbbcaccabaccaabccccabacbcccabbcaabbcbabbbacbbabaaccaacacbccbbbaabcacbaccabbaacbcaccabacabcaaabacbbbaabccabaaabbbacccaacbacacacccaaacbaccacaccacaccaabbcacbbbaaaccbaccbbcbabccaacbacabacbbccbbcacbababccacaacaaabbbbacabbbbbabccbccbbacccbacabccaacabaaaaccbaabcacacabcbbbccbacacaccabb",
		"hhghghgghhhghggghhghgghghhhhhghhghhhghhhgghgghhhhhgghghhhghhhhhgghgghhhghhghgggghhgghgggghhghhhhghhhgghhhhhhhggghhhhhghghhhhgghghghghghhhgghhghhgghgghghghhghggghhhhhhhghggghghhghgggghhhhgggghghghhgghgggghhghhhgghhghghhhhhggghgggggghghhhgghghghhghhghgghhhghhhggghhhhhghghgggghhhhhhhghghghgghhhhhgghggghgghgghghhhghhhghhhhhhghghghgghghhhggghhhhghghhhhghggggggghgghghghhgggghhggggghgggghhgghghhgghhgggghhhhhhghghghhhgghhhhghhhgghhgggghgggggghghggggghhhggghhggghghghghhhhgghggghhghgghhggghghghhghhhggghhhggggghgghhgghhhghghhgghhhghghhgghgghgghghghhghgghghghhhhghhhhhgggghghhhhhhhghhhgggghhggggggghhhhgghh",
		"hhghgihhhhgighgiighhgigiihghghihhihgiggiggighigiighhighhhhiihgghggigigghiiighihihgghiiihhiggiggghiihgihhhhighhihiiiggggghhiigggiiihigighggghghiigighgggggihgghiiighggggggihgiigihhhiiihghhggigggghihgigigiihhhihihighghgigigihggggihiiiihhhhgghiggggiighghiihhhhihghhhhgghhhhiighiiihgghggiihhhgihihhggghiihhhgggiigggigihgggghgigghggihghhhiiggghghhhgghhhghhiihgihigihhghhihgghghghhiggihiihghihghghgghgghghghhhigihiiihigiihihhhhhgghhhhiihiihhiigiiiihhihihghihgiighiighigghggihgghghgiiiihhhiigigiihiihhghhiihigggihhggiigihhhihghgghihhgigggigihgiggiihhggigihghhigighgghihiiighiihigigiighhhgggghiggggigighgiihii",
		"jjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijj",
		"iijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiijjiiiijjiijjjjiiiijjjjiijjiiiijjjjiiiijjiijjjjiiiijjjjii",
	};

	std::vector<int> expected_result5{
		1294  ,
		7378  ,
		261634,
		87362 ,
		136764,
		241534,
		396960,
		12334 ,
		7716  ,
		1764  ,
		2	  ,
		180600,
		716414,
		716412,
		718804,
	};

	std::vector<std::string> my_test{
		"hijklm",
		"abcdef",
	};

	std::vector<int> my_result{1};
	
	std::vector<std::pair<std::vector<std::string>,std::vector<int>>> tests{
		//{my_test, my_result},
		{input1, expected_result1},
		{input2, expected_result2},
		{input3, expected_result3},
		{input4, expected_result4},
		{input5, expected_result5},
	};

#ifdef PROFILING
	auto t1 = std::chrono::high_resolution_clock::now();
	for (int ti{0}; ti < 10; ++ti) {
#endif

	for(const auto& pair:tests){
		auto input = pair.first;
		auto expected_result = pair.second;
		std::vector<int> actual_result;
		for(int i=0;i<input.size()/2;i++)
		{
			int count = GridlandProvinces(input[2*i],input[2*i+1]);
			actual_result.push_back(count);
		}
		std::cout << ((actual_result == expected_result)?"true":"false") << std::endl;
	}

#ifdef PROFILING
	}
	size_t total_time{0};
	auto t2 = std::chrono::high_resolution_clock::now();
	total_time += std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count();
	std::cout << "Total time:" << total_time << std::endl;
#endif
}